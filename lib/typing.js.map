{
  "version": 3,
  "sources": ["../src/typing.ts"],
  "sourcesContent": ["export type CoverType = AMap.Overlay | AMap.Layer | AMap.VectorOverlay | AMap.OverlayDOM | AMap.VectorLayer;\r\n\r\nexport type RecordType<T = any> = Record<string, T>;\r\n\r\nexport interface Context {\r\n  map?: AMap.Map\r\n}\r\n\r\ninterface CoverOption {\r\n  id?: string;\r\n  theme?: string;\r\n}\r\n\r\ntype CoverProps<T = any> = CoverOption & T;\r\n\r\ntype Cover = CoverType & {\r\n  destroy: () => void;\r\n  setTheme: (key: string) => void;\r\n  id: string;\r\n}\r\n\r\nexport type CoverInstance = Cover;\r\n\r\n\r\nexport interface GroupOptions {\r\n  id?: string,\r\n}\r\n\r\n\r\nexport interface OverlayGroup extends AMap.OverlayGroup {\r\n  destroy: () => void;\r\n  setTheme: (key: string) => void;\r\n  setFitView: () => void;\r\n  findOverLays: (callback: (cover: Cover, index?: number) => boolean) => [OverlayGroup, OverlayGroup]\r\n}\r\n\r\nexport interface LayerGroup extends AMap.LayerGroup {\r\n  destroy: () => void;\r\n  setTheme: (key: string) => void;\r\n  setFitView: () => void;\r\n  findLayers: (callback: (cover: Cover, index?: number) => boolean) => [LayerGroup, LayerGroup]\r\n}\r\n\r\n\r\nexport type CoverGroup = LayerGroup | OverlayGroup\r\n\r\nexport interface MapInstance {\r\n  /**\r\n   * 获取地图实例\r\n   * @returns {AMap.Map}\r\n   */\r\n  getMap: () => AMap.Map;\r\n  /**\r\n   * 设置当前 store 的map实例\r\n   * @param {AMap.Map} map \r\n   */\r\n  setMap: (map: AMap.Map) => void;\r\n  /**\r\n   * 创建封装后的遮罩\r\n   * @param Constructor 遮罩构造器\r\n   * @param opts 遮罩参数\r\n   * @returns {Cover} 封装后的遮罩\r\n   */\r\n  create: <T extends CoverType, P = any>(Constructor: new (opts?: RecordType) => T, opts?: CoverProps<P>) => Cover;\r\n  /**\r\n   * 创建遮罩并添加到地图上\r\n   * @param Constructor 遮罩构造器\r\n   * @param opts  遮罩参数\r\n   * @returns {Cover} 封装后的遮罩\r\n   */\r\n  add: <T extends CoverType, P = any>(Constructor: new (opts?: RecordType) => T, opts?: CoverProps<P>) => Cover;\r\n  /**\r\n   * 移除遮罩（并销毁）在地图上将消失\r\n   * @param key 遮罩的key\r\n   */\r\n  remove: (key: string) => void;\r\n  /**\r\n   * 获取遮罩\r\n   * @param key 遮罩的key\r\n   * @returns \r\n   */\r\n  get: <T extends Cover> (key: string) => T | undefined;\r\n  /**\r\n   * 居中遮罩\r\n   * @param {string | AMap.Overlay | AMap.Layer | AMap.Layer[]}key 遮罩的key 或者是\r\n   * @returns \r\n   */\r\n  setFitView: (key: string | CoverType | CoverType[]) => void;\r\n  /**\r\n   * 获取主题\r\n   * @param key 主题key\r\n   * @returns {RecordType} 主题\r\n   */\r\n  getTheme: (key?: string) => RecordType;\r\n  /**\r\n   * 设置主题\r\n   * @param key 主题key\r\n   * @param value 主题值\r\n   */\r\n  setTheme: (key: string, value: any) => void;\r\n  /**\r\n   * 清空主题\r\n   * @param key \r\n   * @returns \r\n   */\r\n  clearTheme:(key?:string) => void;\r\n  /**\r\n   * 获取临时数据\r\n   * @param key \r\n   * @returns \r\n   */\r\n  getExtData: <T = any>(key: string) => T | undefined;\r\n  /**\r\n   * 设置临时数据\r\n   * @param key \r\n   * @param value \r\n   * @returns \r\n   */\r\n  setExtData: (key: string, value: any) => void;\r\n  /**\r\n   * 清空临时数据\r\n   */\r\n  clearExtData:(key?:string) => void;\r\n  /**\r\n   * 创建遮罩分组\r\n   * @param overlays \r\n   * @param opts \r\n   * @returns \r\n   */\r\n  createOverLayGroup: <T extends (AMap.VectorOverlay | AMap.OverlayDOM) >(overlays: T[], opts?: GroupOptions) => OverlayGroup;\r\n  /**\r\n   * 创建遮罩分组\r\n   * @param layers \r\n   * @param opts \r\n   * @returns \r\n   */\r\n  createLayerGroup: <T extends AMap.Layer>(layers: T[], opts?: GroupOptions) => LayerGroup;\r\n  /**\r\n   * 获取遮罩分组\r\n   * @param key \r\n   * @returns \r\n   */\r\n  getGroup: <T extends CoverGroup>(key: string) => T | undefined;\r\n\r\n  /**\r\n   * 删除分组\r\n   * @param key \r\n   * @returns \r\n   */\r\n  removeGroup: (key: string) => void\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
