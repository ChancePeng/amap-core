{
  "version": 3,
  "sources": ["../src/typing.ts"],
  "sourcesContent": ["export type CoverType = AMap.Overlay | AMap.Layer | AMap.VectorOverlay | AMap.OverlayDOM | AMap.VectorLayer;\n\nexport type RecordType<T = any> = Record<string, T>;\n\n/**\n * Context Types\n */\nexport interface Context {\n  map?: AMap.Map\n}\n\n/**\n * Cover Types\n */\n\ninterface CoverStoreOptions {\n  id?: string;\n  theme?: string;\n}\n\nexport type CoverOptions<T = any> = CoverStoreOptions & T;\n\nexport type CoverStoreInstance = {\n  destroy: () => void;\n  setTheme: (key: string) => void;\n  id: string;\n}\n\nexport type CoverInterface<T extends CoverType> = T & CoverStoreInstance;\n\n\n\n\nexport type CoverInstance = CoverType & CoverStoreInstance;\n\n\n\n/**\n * Group Types\n */\nexport interface GroupOptions {\n  id?: string,\n}\n\n\nexport interface OverlayGroup extends AMap.OverlayGroup {\n  destroy: () => void;\n  setTheme: (key: string) => void;\n  setFitView: () => void;\n  findOverLays: (callback: (cover: CoverInstance, index?: number) => boolean) => [OverlayGroup, OverlayGroup]\n}\n\nexport interface LayerGroup extends AMap.LayerGroup {\n  destroy: () => void;\n  setTheme: (key: string) => void;\n  setFitView: () => void;\n  findLayers: (callback: (cover: CoverInstance, index?: number) => boolean) => [LayerGroup, LayerGroup]\n}\n\n\nexport type CoverGroup = LayerGroup | OverlayGroup\n\nexport interface MapInstance {\n  /**\n   * 获取地图实例\n   * @returns {AMap.Map}\n   */\n  getMap: () => AMap.Map;\n  /**\n   * 设置当前 store 的map实例\n   * @param {AMap.Map} map \n   */\n  setMap: (map: AMap.Map) => void;\n  /**\n   * 创建封装后的遮罩\n   * @param Constructor 遮罩构造器\n   * @param opts 遮罩参数\n   * @returns {Cover} 封装后的遮罩\n   */\n  create: <T extends CoverType, P = RecordType>(Constructor: new (opts?: RecordType) => T, opts?: CoverOptions<P>) => CoverInterface<T>;\n  /**\n   * 创建遮罩并添加到地图上\n   * @param Constructor 遮罩构造器\n   * @param opts  遮罩参数\n   * @returns {Cover} 封装后的遮罩\n   */\n  add: <T extends CoverType, P = RecordType>(Constructor: new (opts?: RecordType) => T, opts?: CoverOptions<P>) => CoverInterface<T>;\n  /**\n   * 移除遮罩（并销毁）在地图上将消失\n   * @param key 遮罩的key\n   */\n  remove: (key: string) => void;\n  /**\n   * 获取遮罩\n   * @param key 遮罩的key\n   * @returns \n   */\n  get: <T extends CoverType> (key: string) => CoverInterface<T> | undefined;\n  /**\n   * 居中遮罩\n   * @param {string | AMap.Overlay | AMap.Layer | AMap.Layer[]}key 遮罩的key 或者是\n   * @returns \n   */\n  setFitView: (key: string | CoverType | CoverType[]) => void;\n  /**\n   * 获取主题\n   * @param key 主题key\n   * @returns {RecordType} 主题\n   */\n  getTheme: (key?: string) => RecordType;\n  /**\n   * 设置主题\n   * @param key 主题key\n   * @param value 主题值\n   */\n  setTheme: (key: string, value: any) => void;\n  /**\n   * 清空主题\n   * @param key \n   * @returns \n   */\n  clearTheme:(key?:string) => void;\n  /**\n   * 获取临时数据\n   * @param key \n   * @returns \n   */\n  getExtData: <T = any>(key: string) => T | undefined;\n  /**\n   * 设置临时数据\n   * @param key \n   * @param value \n   * @returns \n   */\n  setExtData: (key: string, value: any) => void;\n  /**\n   * 清空临时数据\n   */\n  clearExtData:(key?:string) => void;\n  /**\n   * 创建遮罩分组\n   * @param overlays \n   * @param opts \n   * @returns \n   */\n  createOverlayGroup: <T extends (AMap.VectorOverlay | AMap.OverlayDOM) >(overlays: T[], opts?: GroupOptions) => OverlayGroup;\n  /**\n   * 创建遮罩分组\n   * @param layers \n   * @param opts \n   * @returns \n   */\n  createLayerGroup: <T extends AMap.Layer>(layers: T[], opts?: GroupOptions) => LayerGroup;\n  /**\n   * 获取遮罩分组\n   * @param key \n   * @returns \n   */\n  getGroup: <T extends CoverGroup>(key: string) => T | undefined;\n\n  /**\n   * 删除分组\n   * @param key \n   * @returns \n   */\n  removeGroup: (key: string) => void\n}"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
