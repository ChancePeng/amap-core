{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { v4 as uuidv4 } from 'uuid'\nimport type { \n  MapInstance, \n  RecordType, \n  Context,\n  CoverType, \n  LayerGroup,\n  CoverInterface, \n  CoverInstance,\n  CoverOptions \n} from './typing'\n\nclass MapStore {\n  private covers: RecordType<CoverInstance>;\n  private themes: RecordType;\n  private context: Context;\n  private extData: RecordType;\n  private coverGroups: RecordType;\n  constructor(map?: AMap.Map) {\n    this.covers = {};\n    this.themes = {};\n    this.context = {\n      map\n    };\n    this.extData = {};\n    this.coverGroups = {};\n  }\n\n  private get map(): AMap.Map {\n    if (this.context.map) {\n      return this.context.map\n    }\n    throw new Error('AMap.Map is not defined')\n  }\n  getMap = (): MapInstance => {\n    return {\n      getMap: this.getMapInstance,\n      setMap: this.setMap,\n      create: this.create,\n      add: this.add,\n      get: this.get,\n      remove: this.remove,\n      setFitView: this.setFitView,\n      getTheme: this.getTheme,\n      setTheme: this.setTheme,\n      clearTheme: this.clearTheme,\n      getExtData: this.getExtData,\n      setExtData: this.setExtData,\n      clearExtData: this.clearExtData,\n      createLayerGroup: this.createLayerGroup,\n      createOverlayGroup: this.createOverlayGroup,\n      getGroup: this.getGroup,\n      removeGroup: this.removeGroup,\n    }\n  }\n\n  private setMap: MapInstance['setMap'] = (map) => {\n    this.context.map = map\n  }\n  private getMapInstance = () => {\n    return this.map\n  }\n\n  private create = <T extends CoverType, P = RecordType>(Constructor:new (opts?: RecordType) => T, opts?:CoverOptions<P>) => {\n    const { id = uuidv4(), theme, ...fields } = opts || {};\n    const style = this.getTheme(theme);\n    const covers = this.covers;\n    const getTheme = this.getTheme;\n    // @ts-ignore\n    class Cover extends Constructor {\n      destroy() {\n        super.destroy();\n        delete covers[id];\n      }\n      setTheme(key: string) {\n        const style = getTheme(key)\n        super.setOptions({\n          ...style\n        })\n      }\n      get id() {\n        return id\n      }\n    }\n    const cover = new Cover({\n      ...style,\n      ...fields\n    });\n    this.covers[id] = cover as CoverInstance;\n    return cover as CoverInterface<T>;\n  }\n\n  private add: MapInstance['add'] = (Constructor, opts) => {\n    const cover = this.create(Constructor, opts);\n    this.map.add(cover as AMap.Overlay);\n    return cover;\n  }\n\n  private get:MapInstance['get'] = (key: string) => {\n    return this.covers[key] as any\n  }\n\n\n  private remove: MapInstance['remove'] = (key) => {\n    const cover = this.get(key);\n    if (cover) {\n      // @ts-ignore\n      cover?.destroy();\n    }\n  }\n\n  private getTheme: MapInstance['getTheme'] = (key) => {\n    if (key) {\n      return this.themes[key]\n    }\n    return {}\n  }\n  private setTheme: MapInstance['setTheme'] = (key, value) => {\n    this.themes[key] = value\n  }\n\n  private clearTheme: MapInstance['clearTheme'] = (key) => {\n    if (key) {\n      delete this.themes[key]\n    } else {\n      this.themes = {}\n    }\n  }\n\n  private getExtData: MapInstance['getExtData'] = (key) => {\n    return this.extData[key]\n  }\n\n  private setExtData: MapInstance['setExtData'] = (key, value) => {\n    this.extData[key] = value\n  }\n\n  private clearExtData: MapInstance['clearExtData'] = (key) => {\n    if (key) {\n      delete this.extData[key]\n    } else {\n      this.extData = {}\n    }\n  }\n  private setFitView: MapInstance['setFitView'] = (key) => {\n    if (typeof key === 'string') {\n      const cover = this.get(key);\n      if (cover) {\n        // @ts-ignore\n        this.map.setFitView(cover)\n      }\n    } else {\n      // @ts-ignore\n      this.map.setFitView(key)\n    }\n  }\n\n  private createOverlayGroup: MapInstance['createOverlayGroup'] = (overlays, opts) => {\n    const { id } = opts || {};\n    const remove = this.remove;\n    const setFitView = this.setFitView;\n    const createOverlayGroup = this.createOverlayGroup;\n    class CoverGroup extends AMap.OverlayGroup {\n      destroy() {\n        this.getOverlays().forEach((cover: CoverInstance) => {\n          this.removeOverlay(cover as AMap.OverlayDOM)\n          remove(cover.id)\n        })\n      }\n      setTheme(key: string) {\n        this.getOverlays().forEach((cover: CoverInstance) => {\n          cover.setTheme(key)\n        })\n      }\n      setFitView() {\n        setFitView(this.getOverlays())\n      }\n      findOverLays(callback: (cover: CoverInstance, index?: number) => boolean) {\n        const overlays = this.getOverlays();\n        const result = createOverlayGroup([]);\n        const filter = createOverlayGroup([]);\n        overlays.forEach((cover: CoverInstance, index: number) => {\n          const bool = callback(cover, index);\n          if (bool) {\n            result.addOverlay(cover as AMap.VectorOverlay)\n          } else {\n            filter.addOverlay(cover as AMap.VectorOverlay)\n          }\n        })\n        return [\n          result,\n          filter\n        ] as [CoverGroup, CoverGroup]\n      }\n    };\n    const coverGroup = new CoverGroup(overlays);\n    if (id) {\n      this.coverGroups[id] = coverGroup;\n    }\n    return coverGroup;\n  }\n\n\n  private createLayerGroup: MapInstance['createLayerGroup'] = (layers, opts) => {\n    const { id } = opts || {}\n    const remove = this.remove;\n    const setFitView = this.setFitView;\n    const createLayerGroup = this.createLayerGroup;\n    class CoverGroup extends AMap.LayerGroup {\n      destroy() {\n        this.getLayers().forEach((cover: CoverInstance) => {\n          this.removeLayer(cover as AMap.Layer)\n          remove(cover.id);\n        })\n      }\n      setTheme(key: string) {\n        this.getLayers().forEach((cover: CoverInstance) => {\n          cover.setTheme(key)\n        })\n      }\n      setFitView() {\n        setFitView(this.getLayers())\n      }\n      findLayers(callback: (cover: CoverInstance, index?: number) => boolean) {\n        const overlays = this.getLayers();\n        const result = createLayerGroup([]);\n        const filter = createLayerGroup([]);\n        overlays.forEach((cover: CoverInstance, index: number) => {\n          const bool = callback(cover, index);\n          if (bool) {\n            result.addLayer(cover as AMap.Layer)\n          } else {\n            filter.addLayer(cover as AMap.Layer)\n          }\n        })\n        return [\n          result,\n          filter\n        ] as [LayerGroup, LayerGroup]\n      }\n    }\n    const coverGroup = new CoverGroup(layers);\n    if (id) {\n      this.coverGroups[id] = coverGroup;\n    }\n    return coverGroup\n  }\n\n  private getGroup: MapInstance['getGroup'] = (key) => {\n    return this.coverGroups[key]\n  }\n\n  private removeGroup: MapInstance['removeGroup'] = (key) => {\n    const coverGroup = this.getGroup(key);\n    coverGroup?.destroy();\n    delete this.coverGroups[key];\n  }\n}\n\nexport default MapStore;\n\nexport * from './typing'\n\n\n\n"],
  "mappings": "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",
  "names": ["uuidv4", "style", "overlays"]
}
