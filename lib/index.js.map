{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { v4 as uuidv4 } from 'uuid'\r\nimport { MapInstance, RecordType, Context, CoverInstance, LayerGroup } from './typing'\r\n\r\nclass MapStore {\r\n  private covers: RecordType<CoverInstance>;\r\n  private themes: RecordType;\r\n  private context: Context;\r\n  private extData: RecordType;\r\n  private coverGroups: RecordType;\r\n  constructor(map?: AMap.Map) {\r\n    this.covers = {};\r\n    this.themes = {};\r\n    this.context = {\r\n      map\r\n    };\r\n    this.extData = {};\r\n    this.coverGroups = {};\r\n  }\r\n\r\n  private get map(): AMap.Map {\r\n    if (this.context.map) {\r\n      return this.context.map\r\n    }\r\n    throw new Error('AMap.Map is not defined')\r\n  }\r\n  getMap = (): MapInstance => {\r\n    return {\r\n      getMap: this.getMapInstance,\r\n      setMap: this.setMap,\r\n      create: this.create,\r\n      add: this.add,\r\n      get: this.get,\r\n      remove: this.remove,\r\n      setFitView: this.setFitView,\r\n      getTheme: this.getTheme,\r\n      setTheme: this.setTheme,\r\n      clearTheme: this.clearTheme,\r\n      getExtData: this.getExtData,\r\n      setExtData: this.setExtData,\r\n      clearExtData: this.clearExtData,\r\n      createLayerGroup: this.createLayerGroup,\r\n      createOverLayGroup: this.createOverLayGroup,\r\n      getGroup: this.getGroup,\r\n      removeGroup: this.removeGroup,\r\n    }\r\n  }\r\n\r\n  private setMap: MapInstance['setMap'] = (map) => {\r\n    this.context.map = map\r\n  }\r\n  private getMapInstance = () => {\r\n    return this.map\r\n  }\r\n\r\n  private create: MapInstance['create'] = (Constructor, opts) => {\r\n    const { id = uuidv4(), theme, ...fields } = opts || {};\r\n    const style = this.getTheme(theme);\r\n    const covers = this.covers;\r\n    const getTheme = this.getTheme;\r\n    // @ts-ignore\r\n    class Cover extends Constructor {\r\n      destroy() {\r\n        super.destroy();\r\n        delete covers[id];\r\n      }\r\n      setTheme(key: string) {\r\n        const style = getTheme(key)\r\n        super.setOptions({\r\n          ...style\r\n        })\r\n      }\r\n      get id() {\r\n        return id\r\n      }\r\n    }\r\n    const cover = new Cover({\r\n      ...style,\r\n      ...fields\r\n    });\r\n    this.covers[id] = cover as CoverInstance;\r\n    return cover as CoverInstance;\r\n  }\r\n\r\n  private add: MapInstance['add'] = (Constructor, opts) => {\r\n    const cover = this.create(Constructor, opts);\r\n    this.map.add(cover as AMap.Overlay);\r\n    return cover;\r\n  }\r\n\r\n  private get = <T extends CoverInstance>(key: string) => {\r\n    return this.covers[key] as (T | undefined);\r\n  }\r\n\r\n\r\n  private remove: MapInstance['remove'] = (key) => {\r\n    const cover = this.get(key);\r\n    if (cover) {\r\n      // @ts-ignore\r\n      cover?.destroy();\r\n    }\r\n  }\r\n\r\n  private getTheme: MapInstance['getTheme'] = (key) => {\r\n    if (key) {\r\n      return this.themes[key]\r\n    }\r\n    return {}\r\n  }\r\n  private setTheme: MapInstance['setTheme'] = (key, value) => {\r\n    this.themes[key] = value\r\n  }\r\n\r\n  private clearTheme: MapInstance['clearTheme'] = (key) => {\r\n    if (key) {\r\n      delete this.themes[key]\r\n    } else {\r\n      this.themes = {}\r\n    }\r\n  }\r\n\r\n  private getExtData: MapInstance['getExtData'] = (key) => {\r\n    return this.extData[key]\r\n  }\r\n\r\n  private setExtData: MapInstance['setExtData'] = (key, value) => {\r\n    this.extData[key] = value\r\n  }\r\n\r\n  private clearExtData: MapInstance['clearExtData'] = (key) => {\r\n    if (key) {\r\n      delete this.extData[key]\r\n    } else {\r\n      this.extData = {}\r\n    }\r\n  }\r\n  private setFitView: MapInstance['setFitView'] = (key) => {\r\n    if (typeof key === 'string') {\r\n      const cover = this.get(key);\r\n      if (cover) {\r\n        // @ts-ignore\r\n        this.map.setFitView(cover)\r\n      }\r\n    } else {\r\n      // @ts-ignore\r\n      this.map.setFitView(key)\r\n    }\r\n  }\r\n\r\n  private createOverLayGroup: MapInstance['createOverLayGroup'] = (overlays, opts) => {\r\n    const { id } = opts || {};\r\n    const remove = this.remove;\r\n    const setFitView = this.setFitView;\r\n    const createOverLayGroup = this.createOverLayGroup;\r\n    class CoverGroup extends AMap.OverlayGroup {\r\n      destroy() {\r\n        this.getOverlays().forEach((cover: CoverInstance) => {\r\n          this.removeOverlay(cover as AMap.OverlayDOM)\r\n          remove(cover.id)\r\n        })\r\n      }\r\n      setTheme(key: string) {\r\n        this.getOverlays().forEach((cover: CoverInstance) => {\r\n          cover.setTheme(key)\r\n        })\r\n      }\r\n      setFitView() {\r\n        setFitView(this.getOverlays())\r\n      }\r\n      findOverLays(callback: (cover: CoverInstance, index?: number) => boolean) {\r\n        const overlays = this.getOverlays();\r\n        const result = createOverLayGroup([]);\r\n        const filter = createOverLayGroup([]);\r\n        overlays.forEach((cover: CoverInstance, index: number) => {\r\n          const bool = callback(cover, index);\r\n          if (bool) {\r\n            result.addOverlay(cover as AMap.VectorOverlay)\r\n          } else {\r\n            filter.addOverlay(cover as AMap.VectorOverlay)\r\n          }\r\n        })\r\n        return [\r\n          result,\r\n          filter\r\n        ] as [CoverGroup, CoverGroup]\r\n      }\r\n    };\r\n    const coverGroup = new CoverGroup(overlays);\r\n    if (id) {\r\n      this.coverGroups[id] = coverGroup;\r\n    }\r\n    return coverGroup;\r\n  }\r\n\r\n\r\n  private createLayerGroup: MapInstance['createLayerGroup'] = (layers, opts) => {\r\n    const { id } = opts || {}\r\n    const remove = this.remove;\r\n    const setFitView = this.setFitView;\r\n    const createLayerGroup = this.createLayerGroup;\r\n    class CoverGroup extends AMap.LayerGroup {\r\n      destroy() {\r\n        this.getLayers().forEach((cover: CoverInstance) => {\r\n          this.removeLayer(cover as AMap.Layer)\r\n          remove(cover.id);\r\n        })\r\n      }\r\n      setTheme(key: string) {\r\n        this.getLayers().forEach((cover: CoverInstance) => {\r\n          cover.setTheme(key)\r\n        })\r\n      }\r\n      setFitView() {\r\n        setFitView(this.getLayers())\r\n      }\r\n      findLayers(callback: (cover: CoverInstance, index?: number) => boolean) {\r\n        const overlays = this.getLayers();\r\n        const result = createLayerGroup([]);\r\n        const filter = createLayerGroup([]);\r\n        overlays.forEach((cover: CoverInstance, index: number) => {\r\n          const bool = callback(cover, index);\r\n          if (bool) {\r\n            result.addLayer(cover as AMap.Layer)\r\n          } else {\r\n            filter.addLayer(cover as AMap.Layer)\r\n          }\r\n        })\r\n        return [\r\n          result,\r\n          filter\r\n        ] as [LayerGroup, LayerGroup]\r\n      }\r\n    }\r\n    const coverGroup = new CoverGroup(layers);\r\n    if (id) {\r\n      this.coverGroups[id] = coverGroup;\r\n    }\r\n    return coverGroup\r\n  }\r\n\r\n  private getGroup: MapInstance['getGroup'] = (key) => {\r\n    return this.coverGroups[key]\r\n  }\r\n\r\n  private removeGroup: MapInstance['removeGroup'] = (key) => {\r\n    const coverGroup = this.getGroup(key);\r\n    coverGroup?.destroy();\r\n    delete this.coverGroups[key];\r\n  }\r\n}\r\n\r\nexport default MapStore;\r\n\r\nexport * from './typing'"],
  "mappings": "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",
  "names": ["uuidv4", "style", "overlays"]
}
